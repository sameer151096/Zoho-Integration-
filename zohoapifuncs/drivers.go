package zohoapifuncs

import (
	"Zoho-Integration-/zohoapifuncs/structures"
	"Zoho-Integration-/zohoapifuncs/util"
	"bytes"
	"encoding/json"
	"errors"
	"log"
	"net/http"
	"time"
)

// GenerateLeadInZoho : driver function to add lead in zoho
func GenerateLeadInZoho(lead *structures.Lead) error {
	// use this header format in every request to zoho api...
	//Zoho-oauthtoken {access_token}
	// Request URL is https://www.zohoapis.com/crm/v2/{module_api_name}
	// use module_api name as Leads

	moduleApiName := "Leads" //candidate for configuration file
	url := "https://www.zohoapis.in/crm/v2/" + moduleApiName
	buf := new(bytes.Buffer)

	// Use your custom Lead definitions here according to the use case
	zohoLead := structures.Lead{}
	zohoLead.Email = lead.Email
	zohoLead.Phone = lead.Phone
	zohoLead.Name = lead.Name

	// this structure holds request format to be used when hitting zoho api endpoint
	requestData := structures.ZohoApiRequest{}

	// this needs to be appended in an array. Because zoho crm takes json array. Can't help it fella.
	requestData.Payload = append(requestData.Payload, util.ConvertLeadsManDataToZohoNativeRequest(&zohoLead))

	json.NewEncoder(buf).Encode(&requestData)

	/*	checkrequestformat, _ := os.Create("generatedrequest.json")
		json.NewEncoder(checkrequestformat).Encode(&requestData)*/

	// Create a new Request
	Request, err := http.NewRequest("POST", url, buf)
	if err != nil {
		log.Print("\nerror while creating request. Error :", err)
		return err
	}

	// access token has to be sent in the headers with the key as specified
	// mandatory step; be mindful of space between zoho-oauthtoken and access token
	Request.Header.Set("authorization", "Zoho-oauthtoken "+GenerateTokenUtility())
	client := http.Client{Timeout: time.Second * 10}
	res, err := client.Do(Request)
	if err != nil {
		log.Print("\n error while receiving response. Error : ", err)
		return err
	}

	// decode response from zoho api..
	responsobj := structures.ZohoApiResponse{}
	err = json.NewDecoder(res.Body).Decode(&responsobj)
	if err != nil {
		log.Print("\n error while decoding response. Error :", err)
		return err
	}

	// now check here for error and then design the output of this function
	for _, val := range responsobj.ResponseData {
		if val.Status == "error" {
			log.Print("Zohoapifuncs error while adding lead to zoho crm. Error :\n Code", val.Code, " api_name: ", val.Details.APIName)
			err := errors.New("FailurerToAddInCRM")
			return err
		}
	}
	return nil

}

//change the below code in url for it to be working(generated from postman)
// https://accounts.zoho.in/oauth/v2/token?grant_type=authorization_code&client_id=1000.V0GHWQWT5FK682485BGZ8Q4OF72CQV&client_secret=bde1e775ca0ef16157c077c3c8eb718fc4ba6208c6&redirect_uri=http://www.abc.com&code=1000.be9795e10640b8beb1631842b74d93a6.ab351a604eb7012f64cd5bbc3798fe3e

// generated by me . Same just change the code value. It says it lasts for 10 minutes but in reality it's just a one time authentication. Once the server is hit token expires..
// https://accounts.zoho.in/oauth/v2/token?client_id=1000.V0GHWQWT5FK682485BGZ8Q4OF72CQV&client_secret=bde1e775ca0ef16157c077c3c8eb718fc4ba6208c6&code=1000.be9795e10640b8beb1631842b74d93a6.ab351a604eb7012f64cd5bbc3798fe3e&grant_type=authorization_code&redirect_uri=http%3A%2F%2Fwww.abc.com

// GenerateTokenUtility : Helper function to retreive access token.. there are two ways an access token can be generated. 1. Using refresh tokens 2. by first generating the first access token and refresh token and then using the refresh token to generate successive access tokens..
func GenerateTokenUtility() string {

	response := util.GenerateAcessTokenUsingRefreshToken()
	//s	fmt.Print("\n Response token generated is ", response.AccessToken)
	return response.AccessToken

	// Note : In case where access token is to be generated for the first time .. use util function GenerateFirstAcessAndRefreshToken
	// response := util.GenerateAcessTokenUsingRefreshToken()
}
